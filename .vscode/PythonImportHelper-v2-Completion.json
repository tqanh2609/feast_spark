[
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Entity",
        "importPath": "feast",
        "description": "feast",
        "isExtraImport": true,
        "detail": "feast",
        "documentation": {}
    },
    {
        "label": "FeatureService",
        "importPath": "feast",
        "description": "feast",
        "isExtraImport": true,
        "detail": "feast",
        "documentation": {}
    },
    {
        "label": "FeatureView",
        "importPath": "feast",
        "description": "feast",
        "isExtraImport": true,
        "detail": "feast",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "feast",
        "description": "feast",
        "isExtraImport": true,
        "detail": "feast",
        "documentation": {}
    },
    {
        "label": "FeatureStore",
        "importPath": "feast",
        "description": "feast",
        "isExtraImport": true,
        "detail": "feast",
        "documentation": {}
    },
    {
        "label": "SparkSource",
        "importPath": "feast.infra.offline_stores.contrib.spark_offline_store.spark_source",
        "description": "feast.infra.offline_stores.contrib.spark_offline_store.spark_source",
        "isExtraImport": true,
        "detail": "feast.infra.offline_stores.contrib.spark_offline_store.spark_source",
        "documentation": {}
    },
    {
        "label": "Float32",
        "importPath": "feast.types",
        "description": "feast.types",
        "isExtraImport": true,
        "detail": "feast.types",
        "documentation": {}
    },
    {
        "label": "Int64",
        "importPath": "feast.types",
        "description": "feast.types",
        "isExtraImport": true,
        "detail": "feast.types",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "PushMode",
        "importPath": "feast.data_source",
        "description": "feast.data_source",
        "isExtraImport": true,
        "detail": "feast.data_source",
        "documentation": {}
    },
    {
        "label": "CURRENT_DIR",
        "kind": 5,
        "importPath": "example_repo",
        "description": "example_repo",
        "peekOfCode": "CURRENT_DIR = Path(__file__).parent\n# Entity definitions\ndriver = Entity(\n    name=\"driver\",\n    description=\"driver id\",\n)\ncustomer = Entity(\n    name=\"customer\",\n    description=\"customer id\",\n)",
        "detail": "example_repo",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "example_repo",
        "description": "example_repo",
        "peekOfCode": "driver = Entity(\n    name=\"driver\",\n    description=\"driver id\",\n)\ncustomer = Entity(\n    name=\"customer\",\n    description=\"customer id\",\n)\n# Sources\ndriver_hourly_stats = SparkSource(",
        "detail": "example_repo",
        "documentation": {}
    },
    {
        "label": "customer",
        "kind": 5,
        "importPath": "example_repo",
        "description": "example_repo",
        "peekOfCode": "customer = Entity(\n    name=\"customer\",\n    description=\"customer id\",\n)\n# Sources\ndriver_hourly_stats = SparkSource(\n    name=\"driver_hourly_stats\",\n    table=\"thidiemcatalog.testthidiem.driver_hourly_stats\",\n    timestamp_field=\"event_timestamp\",\n    created_timestamp_column=\"created\",",
        "detail": "example_repo",
        "documentation": {}
    },
    {
        "label": "driver_hourly_stats",
        "kind": 5,
        "importPath": "example_repo",
        "description": "example_repo",
        "peekOfCode": "driver_hourly_stats = SparkSource(\n    name=\"driver_hourly_stats\",\n    table=\"thidiemcatalog.testthidiem.driver_hourly_stats\",\n    timestamp_field=\"event_timestamp\",\n    created_timestamp_column=\"created\",\n)\ncustomer_daily_profile = SparkSource(\n    name=\"customer_daily_profile\",\n    table=\"thidiemcatalog.testthidiem.customer_daily_profile\",\n    timestamp_field=\"event_timestamp\",",
        "detail": "example_repo",
        "documentation": {}
    },
    {
        "label": "customer_daily_profile",
        "kind": 5,
        "importPath": "example_repo",
        "description": "example_repo",
        "peekOfCode": "customer_daily_profile = SparkSource(\n    name=\"customer_daily_profile\",\n    table=\"thidiemcatalog.testthidiem.customer_daily_profile\",\n    timestamp_field=\"event_timestamp\",\n    created_timestamp_column=\"created\",\n)\n# Feature Views\ndriver_hourly_stats_view = FeatureView(\n    name=\"driver_hourly_stats\",\n    entities=[driver],",
        "detail": "example_repo",
        "documentation": {}
    },
    {
        "label": "driver_hourly_stats_view",
        "kind": 5,
        "importPath": "example_repo",
        "description": "example_repo",
        "peekOfCode": "driver_hourly_stats_view = FeatureView(\n    name=\"driver_hourly_stats\",\n    entities=[driver],\n    ttl=timedelta(days=7),\n    schema=[\n        Field(name=\"conv_rate\", dtype=Float32),\n        Field(name=\"acc_rate\", dtype=Float32),\n        Field(name=\"avg_daily_trips\", dtype=Int64),\n    ],\n    online=True,",
        "detail": "example_repo",
        "documentation": {}
    },
    {
        "label": "customer_daily_profile_view",
        "kind": 5,
        "importPath": "example_repo",
        "description": "example_repo",
        "peekOfCode": "customer_daily_profile_view = FeatureView(\n    name=\"customer_daily_profile\",\n    entities=[customer],\n    ttl=timedelta(days=7),\n    schema=[\n        Field(name=\"current_balance\", dtype=Float32),\n        Field(name=\"avg_passenger_count\", dtype=Float32),\n        Field(name=\"lifetime_trip_count\", dtype=Int64),\n    ],\n    online=True,",
        "detail": "example_repo",
        "documentation": {}
    },
    {
        "label": "driver_stats_fs",
        "kind": 5,
        "importPath": "example_repo",
        "description": "example_repo",
        "peekOfCode": "driver_stats_fs = FeatureService(\n    name=\"driver_activity\",\n    features=[driver_hourly_stats_view, customer_daily_profile_view],\n)",
        "detail": "example_repo",
        "documentation": {}
    },
    {
        "label": "run_demo",
        "kind": 2,
        "importPath": "test_workflow",
        "description": "test_workflow",
        "peekOfCode": "def run_demo():\n    store = FeatureStore(repo_path=\".\")\n    print(\"\\n--- Run feast apply to setup feature store on Snowflake ---\")\n    subprocess.run([\"feast\", \"apply\"])\n    print(\"\\n--- Historical features for training ---\")\n    fetch_historical_features_entity_df(store, for_batch_scoring=False)\n    print(\"\\n--- Historical features for batch scoring ---\")\n    fetch_historical_features_entity_df(store, for_batch_scoring=True)\n    print(\"\\n--- Load features into online store ---\")\n    store.materialize_incremental(end_date=datetime.now())",
        "detail": "test_workflow",
        "documentation": {}
    },
    {
        "label": "fetch_historical_features_entity_df",
        "kind": 2,
        "importPath": "test_workflow",
        "description": "test_workflow",
        "peekOfCode": "def fetch_historical_features_entity_df(store: FeatureStore, for_batch_scoring: bool):\n    # Note: see https://docs.feast.dev/getting-started/concepts/feature-retrieval for more details on how to retrieve\n    # for all entities in the offline store instead\n    entity_df = pd.DataFrame.from_dict(\n        {\n            # entity's join key -> entity values\n            \"driver_id\": [1001, 1002, 1003],\n            # \"event_timestamp\" (reserved key) -> timestamps\n            \"event_timestamp\": [\n                datetime(2021, 4, 12, 10, 59, 42),",
        "detail": "test_workflow",
        "documentation": {}
    },
    {
        "label": "fetch_online_features",
        "kind": 2,
        "importPath": "test_workflow",
        "description": "test_workflow",
        "peekOfCode": "def fetch_online_features(store, use_feature_service: bool):\n    entity_rows = [\n        # {join_key: entity_value}\n        {\n            \"driver_id\": 1001,\n            \"val_to_add\": 1000,\n            \"val_to_add_2\": 2000,\n        },\n        {\n            \"driver_id\": 1002,",
        "detail": "test_workflow",
        "documentation": {}
    }
]